#ifndef FIELD_CONFIG_HPP
#define FIELD_CONFIG_HPP

#include <vector>
#include <limits>

#include "../../include/data_structures/blobnd.hpp"

using namespace std;

typedef vector<vector<vector<vector<float>>>> Vector4D;
typedef vector<vector<vector<float>>> Vector3D;
typedef vector<vector<float>> Vector2D;
typedef vector<float *> Fields;

class HeadMetas {
    public:
        const static inline vector<string> keypoints {
            "nose", "left_eye", "right_eye", "left_ear", "right_ear", "left_shoulder",
            "right_shoulder", "left_elbow", "right_elbow", "left_wrist", "right_wrist",
            "left_hip", "right_hip", "left_knee", "right_knee", "left_ankle", "right_ankle",
            "left_big_toe", "left_small_toe", "left_heel", "right_big_toe", "right_small_toe",
            "right_heel", "f_24", "f_25", "f_26", "f_27", "f_28", "f_29", "f_30", "f_31", "f_32",
            "f_33", "f_34", "f_35", "f_36", "f_37", "f_38", "f_39", "f_40", "f_41", "f_42", "f_43",
            "f_44", "f_45", "f_46", "f_47", "f_48", "f_49", "f_50", "f_51", "f_52", "f_53", "f_54",
            "f_55", "f_56", "f_57", "f_58", "f_59", "f_60", "f_61", "f_62", "f_63", "f_64", "f_65",
            "f_66", "f_67", "f_68", "f_69", "f_70", "f_71", "f_72", "f_73", "f_74", "f_75",
            "f_76", "f_77", "f_78", "f_79", "f_80", "f_81", "f_82", "f_83", "f_84", "f_85", "f_86",
            "f_87", "f_88", "f_89", "f_90", "f_91", "lh_92", "lh_93", "lh_94", "lh_95", "lh_96",
            "lh_97", "lh_98", "lh_99", "lh_100", "lh_101", "lh_102", "lh_103", "lh_104", "lh_105",
            "lh_106", "lh_107", "lh_108", "lh_109", "lh_110", "lh_111", "lh_112", "rh_113", "rh_114",
            "rh_115", "rh_116", "rh_117", "rh_118", "rh_119", "rh_120", "rh_121", "rh_122", "rh_123",
            "rh_124", "rh_125", "rh_126", "rh_127", "rh_128", "rh_129", "rh_130", "rh_131", "rh_132",
             "rh_133"
        };
       const static inline vector<float> sigmas {
            0.026, 0.025, 0.025, 0.035, 0.035, 0.079, 0.079, 0.072, 0.072,
            0.062, 0.062, 0.107, 0.107, 0.087, 0.087, 0.089, 0.089, 0.068,
            0.066, 0.066, 0.092, 0.094, 0.094, 0.042, 0.043, 0.044, 0.043,
            0.04 , 0.035, 0.031, 0.025, 0.02 , 0.023, 0.029, 0.032, 0.037,
            0.038, 0.043, 0.041, 0.045, 0.013, 0.012, 0.011, 0.011, 0.012,
            0.012, 0.011, 0.011, 0.013, 0.015, 0.009, 0.007, 0.007, 0.007,
            0.012, 0.009, 0.008, 0.016, 0.01 , 0.017, 0.011, 0.009, 0.011,
            0.009, 0.007, 0.013, 0.008, 0.011, 0.012, 0.01 , 0.034, 0.008,
            0.008, 0.009, 0.008, 0.008, 0.007, 0.01 , 0.008, 0.009, 0.009,
            0.009, 0.007, 0.007, 0.008, 0.011, 0.008, 0.008, 0.008, 0.01 ,
            0.008, 0.029, 0.022, 0.035, 0.037, 0.047, 0.026, 0.025, 0.024,
            0.035, 0.018, 0.024, 0.022, 0.026, 0.017, 0.021, 0.021, 0.032,
            0.02 , 0.019, 0.022, 0.031, 0.029, 0.022, 0.035, 0.037, 0.047,
            0.026, 0.025, 0.024, 0.035, 0.018, 0.024, 0.022, 0.026, 0.017,
            0.021, 0.021, 0.032, 0.02 , 0.019, 0.022, 0.031
        };
        const static inline vector<vector<float>> pose {
            {0.,9.3,2.}, {-0.3675,9.7,2.}, {0.3675,9.7,2.}, {-0.735,9.5,2.}, {0.735,9.5,2.}, {-1.4,8.,2.}, {1.4,8.,2.},
            {-2.15,6.4,2.}, {2.15,6.4,2.}, {-2.25,4.7,2.}, {2.25,4.7,2.}, {-1.26,4.,2.}, {1.26,4.,2.}, {-1.4,2.,2.},
            {1.4,2.,2.}, {-1.4,0.,2.}, {1.4,0.,2.}, {-1.2,-0.45,3.}, {-1.65,-0.45,2.9}, {-1.4,-0.25,1.9}, {1.2,-0.45,3.},
            {1.65,-0.45,2.9}, {1.4,-0.25,1.9}, {0.735,9.7,2.}, {0.735,9.55,2.}, {0.6825,9.3,2.}, {0.6195,9.05,2.},
            {0.5565,8.8,2.}, {0.4725,8.65,2.}, {0.315,8.55,2.}, {0.1575,8.45,2.}, {0.,8.4,2.}, {-0.1575,8.45,2.},
            {-0.315,8.55,2.}, {-0.4725,8.65,2.}, {-0.5565,8.8,2.}, {-0.6195,9.05,2.}, {-0.6825,9.3,2.}, {-0.735,9.55,2.},
            {-0.735,9.7,2.}, {0.63,9.8,2.}, {0.525,9.9,2.}, {0.42,9.95,2.}, {0.315,9.9,2.}, {0.21,9.85,2.},{-0.21,9.85,2.},
            {-0.315,9.9,2.}, {-0.42,9.95,2.}, {-0.525,9.9,2.}, {-0.63,9.8,2.}, {0.,9.7,2.}, {0.,9.566,2.}, {0.,9.433,2.},
            {0.,9.3,2.}, {0.21,9.2,2.}, {0.105,9.15,2.}, {0.,9.1,2.}, {-0.105,9.15,2.}, {-0.21,9.2,2.}, {0.4725,9.7,2.},
            {0.42,9.75,2.}, {0.315,9.75,2.}, {0.21,9.7,2.}, {0.315,9.65,2.}, {0.42,9.65,2.}, {-0.21,9.7,2.},
            {-0.315,9.75,2.}, {-0.42,9.75,2.}, {-0.4725,9.7,2.}, {-0.42,9.65,2.}, {-0.315,9.65,2.}, {0.315,8.8,2.},
            {0.21,8.85,2.}, {0.105,8.9,2.}, {0.,8.85,2.}, {-0.105,8.9,2.}, {-0.21,8.85,2.}, {-0.315,8.8,2.}, {-0.21,8.75,2.},
            {-0.105,8.7,2.}, {0.,8.65,2.}, {0.105,8.7,2.}, {0.21,8.75,2.}, {0.21,8.82,2.}, {0.105,8.82,2.}, {0.,8.82,2.},
            {-0.105,8.82,2.}, {-0.21,8.82,2.}, {-0.105,8.79,2.}, {0.,8.79,2.}, {0.105,8.79,2.}, {-2.25,4.4,2.}, {-2.15,4.25,2.},
            {-2.05,4.1,2.}, {-1.95,3.95,2.}, {-1.85,3.8,2.}, {-2.1,3.8,2.}, {-2.066,3.65,2.}, {-2.033,3.5,2.}, {-2.,3.35,2.},
            {-2.25,3.8,2.}, {-2.25,3.65,2.}, {-2.25,3.5,2.}, {-2.25,3.35,2.}, {-2.4,3.8,2.}, {-2.433,3.65,2.}, {-2.466,3.5,2.},
            {-2.5,3.35,2.}, {-2.6,3.8,2.}, {-2.633,3.6995,2.}, {-2.666,3.599,2.}, {-2.7,3.5,2.}, {2.25,4.4,2.}, {2.15,4.25,2.},
            {2.05,4.1,2.}, {1.95,3.95,2.}, {1.85,3.8,2.}, {2.1,3.8,2.}, {2.066,3.65,2.}, {2.033,3.5,2.}, {2.,3.35,2.},
            {2.25,3.8,2.}, {2.25,3.65,2.}, {2.25,3.5,2.}, {2.25,3.35,2.}, {2.4,3.8,2.}, {2.433,3.65,2.}, {2.466,3.5,2.},
            {2.5,3.35,2.}, {2.6,3.8,2.}, {2.633,3.6995,2.}, {2.666,3.599,2.}, {2.7,3.5,2.}
        };
        const static inline vector<pair<int, int>> skeleton {
            {16, 14}, {14, 12}, {17, 15}, {15, 13}, {12, 13}, {6, 12}, {7, 13}, {6, 7}, {6, 8}, {7, 9}, {8, 10},
            {9, 11}, {2, 3}, {1, 2}, {1, 3}, {2, 4}, {3, 5}, {4, 6}, {5, 7}, {16, 20}, {16, 19}, {16, 18}, {17, 23},
            {17, 21}, {17, 22}, {25, 5}, {39, 4}, {54, 1}, {60, 3}, {3, 63}, {66, 2}, {2, 69}, {24, 25}, {25, 26},
            {26, 27}, {27, 28}, {28, 29}, {29, 30}, {30, 31}, {31, 32}, {32, 33}, {33, 34}, {34, 35}, {35, 36},
            {36, 37}, {37, 38}, {38, 39}, {39, 40}, {24, 41}, {41, 42}, {42, 43}, {43, 44}, {44, 45}, {45, 51},
            {40, 50}, {50, 49}, {49, 48}, {48, 47}, {47, 46}, {46, 51}, {24, 60}, {60, 61}, {61, 62}, {62, 63},
            {63, 51}, {63, 64}, {64, 65}, {65, 60}, {40, 69}, {69, 68}, {68, 67}, {67, 66}, {66, 51}, {66, 71},
            {71, 70}, {70, 69}, {51, 52}, {52, 53}, {53, 54}, {54, 55}, {55, 56}, {56, 57}, {57, 58}, {58, 59},
            {59, 54}, {57, 75}, {78, 36}, {72, 28}, {72, 83}, {72, 73}, {73, 74}, {74, 75}, {75, 76}, {76, 77},
            {77, 78}, {78, 79}, {79, 80}, {80, 81}, {81, 82}, {82, 83}, {72, 84}, {84, 85}, {85, 86}, {86, 87},
            {87, 88}, {88, 78}, {72, 91}, {91, 90}, {90, 89}, {89, 78}, {92, 10}, {92, 93}, {92, 97}, {92, 101},
            {92, 105}, {92, 109}, {93, 94}, {94, 95}, {95, 96}, {97, 98}, {98, 99}, {99, 100}, {101, 102},
            {102, 103}, {103, 104}, {105, 106}, {106, 107}, {107, 108}, {109, 110}, {110, 111}, {111, 112},
            {94, 97}, {97, 101}, {101, 105}, {105, 109}, {113, 11}, {113, 114}, {113, 118}, {113, 122},
            {113, 126}, {113, 130}, {114, 115}, {115, 116}, {116, 117}, {118, 119}, {119, 120}, {120, 121},
            {122, 123}, {123, 124}, {124, 125}, {126, 127}, {127, 128}, {128, 129}, {130, 131}, {131, 132},
            {132, 133}, {115, 118}, {118, 122}, {122, 126}, {126, 130}
        };
       const static inline vector<float> score_weights {
            90.0, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576, 0.7575757575757576,
            0.7575757575757576, 0.7575757575757576
        };
};

class CifMetas {
    public:
        int head_index = 0;
        int base_stride = 16;
        int stride = 8;
        int upsample_stride = 2;
        int n_fields = 133;
        float decoder_min_scale = 0.0;

        HeadMetas head_metas;

        int decoder_seed_mask = -1;
        int training_weights = -1;

};

class CafMetas {
    public:
        float dense_to_sparse_radius = 2.0;
        bool only_in_field_of_view = false;
        int head_index = 1;
        int n_fields = 160;
        float decoder_min_distance = 0.0;
        float decoder_max_distance = std::numeric_limits<float>::infinity();
        int stride = 8;

        HeadMetas head_metas;

        vector<float> decoder_confidence_scales;
        int training_weights = -1;
        int sparse_skeleton = -1;
};

struct Seed {
    float vv;
    int field;
    float xx;
    float yy;
    float ss;
};

struct HeapItem {
    float score;
    vector<float> new_xysv;
    int start_i;
    int end_i;
};

class heap_item_comparer {
    public:
        bool operator()(const HeapItem &hi_1, const HeapItem &hi_2) {
            if(hi_1.score != hi_2.score)
                return hi_1.score > hi_2.score;
            else if(hi_1.new_xysv != hi_2.new_xysv)
                return hi_1.new_xysv > hi_2.new_xysv;
            else if(hi_1.start_i != hi_2.start_i)
                return hi_1.start_i > hi_2.start_i;
            else if(hi_1.end_i != hi_2.end_i)
                return hi_1.end_i > hi_2.end_i;

            return false;
        }
};

#endif