name: Build and upload to PyPI

# Build on every branch push, tag push, and pull request change:
# on: [push, pull_request]
# Alternatively, to publish when a (published) GitHub Release is created, use the following:
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-latest, macos-11]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache checkpoints and data
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache
            data-cifar10
          key: ${{ runner.os }}-${{ hashFiles('setup.py') }}

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.1.2

      - name: Build wheels
        env:
          CIBW_BUILD: "cp3[6,7,8,9]-manylinux* cp3[6,7,8,9]-macosx* cp3[6,7,8,9]-win_amd64"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          MACOSX_DEPLOYMENT_TARGET: "10.14"  # for C++17 support
          CIBW_ARCHS_MACOS: arm64  x86_64 universal2
          CIBW_ARCHS_LINUX: x86_64 aarch64
          # CIBW_REPAIR_WHEEL_COMMAND_LINUX: "pip install torch; python -c 'import torch;print(torch.utils.cmake_prefix_path)'; LD_LIBRARY_PATH=`python -c 'import torch;print(torch.utils.cmake_prefix_path)'`/../../lib auditwheel repair -w {dest_dir} {wheel}; pip uninstall -y torch"
          CIBW_REPAIR_WHEEL_COMMAND: ""  # deactivate repair wheel for now (embeds 100s of MB of PyTorch libraries otherweise)
        run: python -m cibuildwheel --output-dir wheelhouse

      - run: ls -hla ./wheelhouse
        if: runner.os == 'Linux'

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - run: pip install -e .

      - run: python -c "import openpifpaf; print(openpifpaf.__version__)"
      - run: git status
      - run: git diff
      - run: python -c "import openpifpaf; assert 'dirty' not in openpifpaf.__version__"

      - name: Build sdist
        run: python setup.py sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/
